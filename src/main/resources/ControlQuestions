1. Чем отличается процесс от потока?
У одного процессора может выполняться только один процесс в один момент времени. Больше одного процесса процессор может выполнять только по очереди. Чем и пользуются потоки (Threads). В идеале должно быть на каждый процессор не больше одного потока, но может быть сколько угодно.

2. Каким образом можно создать поток?
По умолчанию, в любой программе уже создана нить - main.
Также можно создать объект потока инстанцируя класс Thread. В его конструктор передаётся реализация интерфейса Runnable.
Запускается поток методом start(). Но, если у потока вызвать метод run(), то он выполнится в вызывающем потоке.

3. Как работают методы sleep, yield, wait, notify и notifyAll?
sleep(long millis) переводит нить в спящий режим на указанное количество мс.
yield() указывает планировщику, что текущая нить может отказаться от использования процессора. Планировщик может проигнорирровать это.
wait() переводит нить в состояние ожидания.
notify() будит одну произвольную из всех нитей, которые были в состоянии ожидания.
notifyAll() будит все нити, которые были в состоянии ожидания.

4. Объясните следующие термины: монитор, мьютекс, критическая секция.
Критическая секция - часть кода программы, помеченная ключевым словом synchronized, которая может выполняться только одним потоком.
Мьютекс - это признак, который есть у каждого объекта. Он показывает, занята ли критическая секция, монитором которой является этот объект, каким-либо потоком. Напрямую к нему нет доступа у программы.
Монитор - надстройка над мьютексом. Монитор объекта переводит мьютекс в состояние "занят" при начале работы потока в критической секции. После того, как критическая секция освобождена, мьютекс переводится монитором в состояние "свободен". Монитором для критической секции может выступать любой объект.

5. Как работает join()?
При вызове join() у одного потока во втором потоке, дальнейшие инструкции второго потока не выполняются, пока первый поток не перейдёт в состояние TERMINATED. Либо не выбросится исключение InterruptedException, если какой-либо поток прервал поток, у которого был вызван метод join().

6. Что такое DeadLock? Приведите примеры.
Взаимная блокировка - это ситуация, когда два потока находятся в разных критических секциях и не могут их освободить, потому что после этих критических секций им нужно попасть (вернуться) в критические секции, занятые друг другом.
Пример 1. ВБ порядка синхронизаций.
void method (Object o1, Object o2) {
    synchronized (o1) {
        synchronized (o2) {
            someActions(o1, o2);
        }
    }
}
Если один поток займёт монитор объекта o2, а другой в это же время монитор объекта o1, то они будут ждать освобождения друг другом своих секций, возникнет ситуация Deadlock. Чтобы избежать этого, нужно, в зависимости от какой-либо характеристики объекта, разветвлять выполнение программы на разные очерёдности синхронизации. Т.е.:
void method (Object o1, Object o2) {
    if (o1.parameter >= o2.parameter) {
        synchronized (o1) {
            synchronized (o2) {
                someActions(o1, o2);
            }
        }
    } else {
        synchronized (o2) {
            synchronized (o1) {
                someActions(o1, o2);
            }
        }
    }
}
Пример 2. ВБ между объектами.
Class Class1 {
    Class2 class2 = new Class2();
    synchronized void method1() {   //1. Занимается монитор текущего объекта
        class2.method2();           //4. Пытается попасть в критическую секцию, которая в данный момент занята,
                                    //так как выполняется Class2.method1()
    }
    synchronized void method2() {
    }
}
Class Class2 {
    Class1 class1 = new Class1();
    synchronized void method1() {   //2. Занимается монитор текущего объекта
        class1.method2();           //3. Пытается попасть в критическую секцию, которая в данный момент занята,
                                    //так как выполняется Class1.method1()
    }
    synchronized void method2() {
    }
}
Чтобы избежать этого, нужно использовать открытые вызовы (вне критических секций) синхронизированных методов других объектов:
Class Class1 {
    Class2 class2 = new Class2();
    void method1() {                //1. Монитор текущего объекта не занимается.
        synchronized (this) {       //2. Выполняется критическая секция.
        }
        class2.method2();           //6. Монитор объекта class2 свободен, метод выполняется.
    }
    synchronized void method2() {
    }
}
Class Class2 {
    Class1 class1 = new Class1();
    void method1() {                //3. Монитор текущего объекта не занимается.
        synchronized (this) {       //4. Выполняется критическая секция.
        }
        class1.method2();           //5. Монитор объекта class1 свободен, метод выполняется.
    }
    synchronized void method2() {
    }
}

7. Назовите различия между Collections.synchronizedMap(new HashMap()) и ConcurrentHashMap.
К Collections.SynchronizedMap может иметь доступ только один поток.
А к ConcurrentHashMap может иметь доступ несколько потоков, потому что при работе блокируется только одна секция. Она работает быстрее.

8. Различия в интерфейсах Runnable и Callable.
В Runnable метод run() не возвращает значения и не выбрасывает исключение.
Callable параметризован и его метод call возвращает значение. Также может выбрасывать исключение Exception.

9. Различя между isInterrupted(), interrupted().
interrupted() - статический, возвращает состояние статуса interrupted, был ли прерван поток. Вместе с этим статус сбрасывается в значение false. Т.е., если поток был прерван, то при первом вызове вернётся true, а при втором - false, если только между вызовами не произошло прерывание.
isInterrupted() возвращает состояние статуса interrupted, был ли прерван поток, не меняя его.

10. Что происходит при вызове Thread.interrupt()?
Поток прерывается.

11. Перечислите ВСЕ причины по которым может выскочить InterruptedException.
Это исключение выбрасывается в случае, когда поток выполняет какие-либо действия, либо находится в состоянии ожидания или сна и его прерывает другой поток.

12. Назовите отличия synchronize{} и ReentrantLock.
Методы ReentrantLock позволяют еще до блокировки узнать, занят ли он сейчас, сколько потоков ждут его в очереди, сколько раз подряд текущий поток завладел им.
tryLock(long timeout) - ожидает блокировки только заданное время.
Также есть свойство fair (устанавливается конструктором) - устанавливает справедливость очереди, FIFO.
Использование:
lock.lock();
try {
    //... method body
} finally {
    lock.unlock()
}

13. Приведите наиболее существенное отличие между CountDownLatch и Barrier.
CountDownLatch - обратный счётчик. Изначально инициализируется в конструкторе определённым значением. Когда при выполнении потока вызывается метод countDown() у счётчика, то его значение уменьшается на 1. Потом, при достижении метода await(), поток останавливает своё выполнение и ожидает пока другие потоки также выполнят часть кода между countDown() и await(). Когда счётчик достигнет 0 - все потоки продолжают своё выполнение.
CyclicBarrier - обратный счётчик. Изначально инициализируется в конструкторе определённым значением. Когда поток доходит до вызова метода await() у барьера, счётчик уменьшается на 1. Когда потоки уменьшат значение счётчика до 0, они продолжат своё выполнение.
У CyclicBarrier есть метод reset(), который сбрасывает счётчик в его первоначальное состояние. Это и является основным отличием между CountDownLatch и CyclicBarrier.

14. Отличие Thread.start() и Thread.run()?
start() будет выполнятся потоком, для которого вызывается этот метод.
run() выполнится в текущем потоке.

15. Объясните ключевое слово volatile.
volаtile - это ключевое слово, которое используется для полей класса.
Если поле класса обозначено volatile, то чтение и запись переменной будет происходить только из RAM памяти процессора. Исключается ситуация, когда один поток работает с актуальным значением поля, а другой с кешированным (отличающимся от актуального).
При обращении к такому полю процессор оборачивает переменную в критическую секцию, обеспечивая тем самым синхронизацию ресурсов.
Пример использования:
public final class DCLSingleton {
    private volatile static DCLSingleton inst;

    public static DCLSingleton instOf() {
        if (inst == null) {
            synchronized (DCLSingleton.class) {
                if (inst == null) {
                    inst = new DCLSingleton();
                }
            }
        }
        return inst;
    }

    private DCLSingleton() {
    }
}

16. Расскажите про приоритеты потока.
У каждого потока есть приоритет от 1 до 10. По умолчанию, приоритет устанавливается в среднее значение 5. Но его можно поменять методом setPriority(int newPriority). Приоритет носит рекомендательный характер. Например, если выполнения критической секции ожидают несколько потоков, то с большей вероятностью следующий по очереди будет поток с большим приоритетом.

17. Что такое потоки-демоны?
Потоки-демоны - это служебные потоки, которые обслуживают различные части программы. Например, потоки демоны для GC, логирования, обработки блоков finalize. Любой поток можно сделать демоном с помощью метода setDaemon(true). Необходимое условие - JMV не должна ещё этот поток создать, т.е., до вызова start() у потока. В дальнейшем поменять тип потока уже нельзя.

18. Назовите все возможные состояния потока.
NEW - нить создана, но не запущена.
RUNNABLE - нить запущена и выполняется.
BLOCKED - нить заблокирована.
WAITING - нить ожидает уведомления.
TIMED_WAITING - нить ожидает уведомление в течении определенного периода.
TERMINATED - нить завершила работу.

19. Что такое race condition?
Состояние гонки - это состояние работы многопоточного приложения, когда разные потоки одновременно пытаются совершить не атомарные операции с ресурсом. В итоге приложение работает непредсказуемо.

20. Что такое ThreadLocal переменная?
Класс обёртка.
Это тип переменной, который у одного объекта создаёт для каждого потока свой экземпляр. В итоге получается, что любой тип, используемый в ThreadLocal становится потокобезопасным.
get() - возвращает значение переменной ThreadLocal.
set() - устанавливает значение внутренн`ей переменной ThreadLocal.
setInitialValue() - устанавливает начальное значение внутренней переменной (по умолчанию).
remove() - удаляет значение внутренней переменной. Если впоследствии программа обратится к внутренней переменной, то оно инициализируется значением по умолчанию.

21. Что такое FutureTask?
FutureTask - это класс, который реализует интерфейс Runnable и Future. Т. к. он реализует Runnable - то его можно передавать в поток на выполнение (в конструкторе потока)). Future даёт нам возможность получить результат типа, определённого в параметре типа класса FutureTask, методом get(). В момент вызова get() программа переводит выполнение в синхронный режим и будет ожидать конца вычисления task'а.
FutureTask в конструкторе может принимать как Runnable так и Callable.

22. Что такое Thread Pool?
Пул - это хранилище для ресурсов. Ресурс представляет из себя поток, вычислительную мощность. Количество потоков равно значению при инициализации и не меняется. Обычно это количество процессоров в системе.
Задачи на выполнение находятся в блокирующей очереди. Когда в очередь поступает задача, то всем нитям, которые были свободны (в состоянии WAITING) посылается сигнал проснуться и работать над задачей. Нить которая первая взяла задачу, продолжает выполнение, остальные опять переводятся в состояние WAITING.

23. Что такое Semaphore?
Чтобы получить разрешение (permit) - вызывается метод acquire().
Когда permit больше не нужен, его нужно отдать - release().
Когда семафор создаётся, у него может быть отрицательное или нулевое количество permit'ов. В этом случае поток, когда запросит permit (acquire()), будет ожидать, когда у семафора их количество станет > 0 (release()).
Также есть свойство fair (устанавливается конструктором) - устанавливает справедливость очереди, FIFO.

24. Чем отличается submit от execute у ExecutorServices?
submit() возвращает объект, реализующий интерфейс Future. Методом get() можно получить вычисленное значение. Принимает в качестве параметра как Callable так и Runnable.
execute() ничего не возвращает. Просто ставит на выполнение задачу в пул. Принимает в качестве парметра только Runnable.

25. Чем отличается shutdown от shutdownNow у ThreadPoolExecutor?
shutdown() прерывает выполнение всех выпоняемых задач.
shutdownNow() прерывает выполнение всех выпоняемых задач и очищает очередь выполнения. Возвращает список задач, которые были в очереди.

27. Как создать ThreadPool у ExecutorService только на 1, на 5, на неограниченное количество потоков.
На 1 - Executors.newSingleThreadExecutor().
На 5 - Executors.newFixedThreadPool(int).
На неограниченное - Executors.newCachedThreadPool().

28. Что такое ReadWriteLock?
Способ блокировки ресурса со спецификой на чтение/запись значений в переменные. Предполагается, что операция чтения происходит намного чаще, чем записи. Поэтому, если нет блокировки на запись, то читать значения может любое количество потоков. Но если началась блокировка на запись в переменные, то потоки чтения этих переменных блокируются.
Пример блокировки на чтение:
ReadWriteLock lock = new ReentrantReadWriteLock();
lock.writeLock().lock();
try {
    value++;
} finally {
    lock.writeLock().unlock();
}
Пример блокировки на чтение:
lock.readLock().lock();
try {
    return value;
} finally {
    lock.readLock().unlock();
}

29. В чём отличие Thread от FutureTask? В чём отличие Thread.interrupt() и FutureTask.cancel().
Thread - поток, в котором мы запускаем задачу на выполнение.
FutureTask - сама задача. Реализует помимо Runnable ещё и интерфейс Future, что даёт нам возможность получить результат типа, определённого в параметре типа класса FutureTask, методом get(). Сам объект типа FutureTask можно передавать в Thread в качестве задачи.
Thread.interrupt() - прерывает поток.
FutureTask.cancel(boolean mayInterruptIfRunning) - прерывает выполнение задачи. С помощью параметра mayInterruptIfRunning, можно указать, прерывать ли поток, в котором запущена задача.

30. Расскажите про шаблон проектирования Producer Consumer.
Есть потребитель - Consumer, есть производитель - Producer.
Поставщик берёт задачи извне и поставляет их потребителю.
Потребитель выполняет задачи.
Когда поставщик имеет максимальное количество неотданных потребителю задач - он их больше не принимает извне. Когда у него нет задач для потребителя - он их не отдаёт.
Когда у потребителя больше нет ресурсов на выполнение задач - он их больше не принимает от поставщика. Как только у него появляется свободный ресурс - он делает запрос поставщику на задачу.
В Java этот шаблон реализован в виде пула потоков - Thread Pool. В нём поставщик - это блокирующая очередь, потребитель - хранилище  потоков.
