2. ExecutorService рассылка почты. [#63097]

В предыдущем задании мы познакомились, как в примитивном случае можно реализовать пул нитей.
В JDK входит пакет concurrent в котором уже есть готовая реализация.

```
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
```

Пример. Создаем пул, добавляем в него задачи.

```
ExecutorService pool = Executors.newFixedThreadPool(
    Runtime.getRuntime().availableProcessors()
);

pool.submit(new Runnable() {
    @Override
    public void run() {
        System.out.println("Execute " + Thread.currentThread().getName());
    }
});
pool.submit(new Runnable() {
    @Override
    public void run() {
        System.out.println("Execute " + Thread.currentThread().getName());
    }
});

pool.shutdown();
while (!pool.isTerminated()) {
    try {
        Thread.sleep(100);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
System.out.println("Execute " + Thread.currentThread().getName());
```

Давайте разберемся в каждой строчке.

```
ExecutorService pool = Executors.newFixedThreadPool(
    Runtime.getRuntime().availableProcessors()
);
```

Создает пул нитей по количеству доступных процессоров.

```
pool.submit(new Runnable() {
    @Override
    public void run() {
        System.out.println("Execute " + Thread.currentThread().getName());
    }
});
```
Добавляет задачу в пул и сразу ее выполняет.

```
pool.shutdown();
while (!pool.isTerminated()) {
    try {
        Thread.sleep(100);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
```

Закрываем пул и ждем пока все задачи завершатся.

Если мы посмотрим внутрь реализации этого пула, то схема будет идентична решению задания о пуле.

Задание.

1. Реализовать сервис для рассылки почты. Создайте класс EmailNotification.

2. В классе будет метод emailTo(User user) - он должен через ExecutorService отправлять почту.

Так же добавьте метод close() - он должен закрыть pool. То есть в классе mailNotification должно быть поле pool, которые используется в emailTo и close().

3. Модель User описывают поля username, email.

4. Метод emailTo должен брать данные пользователя и подставлять в шаблон

subject = Notification {username} to email {email}.

body = Add a new event to {username}

5. Создайте метод public void send(String subject, String body, String email) - он должен быть пустой.

6. Через ExecutorService создайте задачу, которая будет создавать данные для пользователя и передавать их в метод send.

7. Залейте код в репозиторий, оставьте ссылку на коммит.

8. Переведите ответственного на Петра Арсентьева.
